import { useState, useEffect } from 'react';
import { Bot, ChevronDown, ChevronUp, CheckCircle, Clock } from 'lucide-react';
import { AiProfileService } from '../../../services/ai-profile.service';

interface AITicketHelperProps {
  ticketTitle: string;
  ticketDescription: string;
  ticketUrgency: 'low' | 'medium' | 'high';
  isOpen?: boolean;
}

export function AITicketHelper({ 
  ticketTitle, 
  ticketDescription, 
  ticketUrgency,
  isOpen = true 
}: AITicketHelperProps) {
  const [expanded, setExpanded] = useState(isOpen);
  const [isLoading, setIsLoading] = useState(false);
  const [solution, setSolution] = useState<string | null>(null);
  const [error, setError] = useState<string | null>(null);

  useEffect(() => {
    if (expanded && !solution && !error && !isLoading) {
      generateSolution();
    }
  }, [expanded, solution, error]);

  const generateSolution = async () => {
    if (!ticketTitle || !ticketDescription) return;
    
    setIsLoading(true);
    setError(null);
    
    try {
      // Create a prompt for the AI
      const prompt = `I need assistance with the following support ticket:
      
Title: ${ticketTitle}
Description: ${ticketDescription}
Urgency: ${ticketUrgency}

Please provide a helpful response that:
1. Acknowledges the problem
2. Offers a possible solution or troubleshooting steps
3. Indicates when a support staff will follow up (based on urgency: high=1 hour, medium=4 hours, low=24 hours)
4. Includes links to relevant documentation if applicable`;

      // Get response from AI
      const response = await AiProfileService.queryProfile(prompt);
      
      if (response && response.response) {
        setSolution(response.response);
      } else {
        setError('Could not generate a solution. Please wait for support staff to respond.');
      }
    } catch (error) {
      console.error('Error generating AI solution:', error);
      setError('An error occurred while generating a solution. Please wait for support staff to respond.');
    } finally {
      setIsLoading(false);
    }
  };

  return (
    <div className="border border-blue-100 rounded-lg bg-blue-50 overflow-hidden">
      {/* Header */}
      <div 
        className="bg-blue-100 p-3 flex items-center justify-between cursor-pointer"
        onClick={() => setExpanded(!expanded)}
      >
        <div className="flex items-center gap-2">
          <Bot className="h-5 w-5 text-blue-600" />
          <h3 className="font-medium text-blue-800">AI Assistant</h3>
          <span className="text-xs bg-blue-200 text-blue-700 px-2 py-0.5 rounded-full">
            Beta
          </span>
        </div>
        <button 
          className="text-blue-600 hover:text-blue-800 p-1"
          aria-label={expanded ? 'Collapse' : 'Expand'}
        >
          {expanded ? (
            <ChevronUp className="h-4 w-4" />
          ) : (
            <ChevronDown className="h-4 w-4" />
          )}
        </button>
      </div>
      
      {/* Content */}
      {expanded && (
        <div className="p-4">
          {isLoading ? (
            <div className="flex items-center justify-center p-4">
              <div className="animate-spin rounded-full h-6 w-6 border-2 border-blue-500 border-t-transparent"></div>
              <span className="ml-2 text-blue-700">Generating a solution...</span>
            </div>
          ) : error ? (
            <div className="text-red-600 p-2 rounded-lg bg-red-50 border border-red-100">
              <p>{error}</p>
            </div>
          ) : solution ? (
            <div className="space-y-3">
              <div className="flex items-start gap-2">
                <CheckCircle className="h-5 w-5 text-green-600 mt-0.5" />
                <div>
                  <h4 className="font-medium text-gray-800">Automatic Solution</h4>
                  <p className="text-xs text-gray-500">Generated by AI based on similar issues</p>
                </div>
              </div>
              
              <div className="whitespace-pre-wrap text-sm bg-white p-3 rounded-lg border border-gray-100">
                {solution}
              </div>
              
              <div className="flex items-center justify-between text-xs">
                <div className="flex items-center gap-1 text-gray-500">
                  <Clock className="h-3 w-3" />
                  <span>
                    {ticketUrgency === 'high' 
                      ? 'Support staff will respond within 1 hour' 
                      : ticketUrgency === 'medium'
                        ? 'Support staff will respond within 4 hours'
                        : 'Support staff will respond within 24 hours'
                    }
                  </span>
                </div>
                <div>
                  <span className="text-blue-600">Was this helpful?</span>
                  <button className="ml-2 px-2 py-1 bg-blue-100 text-blue-700 rounded hover:bg-blue-200">
                    Yes
                  </button>
                  <button className="ml-1 px-2 py-1 bg-gray-100 text-gray-700 rounded hover:bg-gray-200">
                    No
                  </button>
                </div>
              </div>
            </div>
          ) : (
            <p className="text-gray-600">
              Click "Generate Solution" to get AI-powered assistance while you wait for support staff.
            </p>
          )}
          
          {!solution && !isLoading && (
            <button
              onClick={generateSolution}
              className="mt-3 px-3 py-1.5 bg-blue-600 text-white rounded-md text-sm hover:bg-blue-700"
            >
              Generate Solution
            </button>
          )}
        </div>
      )}
    </div>
  );
} 